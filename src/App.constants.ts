import { V } from "./App.types";
import { parserV } from "./App.utils";

const TLS_1_2_CONN = {
  id: "1",
  title: "Fluxo de conex√£o TLS 1.2",
  description:
    "Transport Layer Security (TLS) 1.2 √© um protocolo criptogr√°fico amplamente utilizado para estabelecer comunica√ß√µes seguras pela Internet.",
  src: `
    hospedeiros:
      c: cliente
      s: servidor
    
    primeiroPasso: 1
    
    passos:
      - nome: TCP SYN
        etapa: ü§ù TCP Handshake
        mostrar:
          flexa: [c, s]
        quando:
          continuar: proximo()
        descricao: O cliente envia uma solicita√ß√£o inicial (SYN) para iniciar o handshake TCP.
    
      - nome: TCP SYN + ACK
        etapa: ü§ù TCP Handshake
        mostrar:
          flexa: [s, c]
        quando:
          continuar: proximo()
        descricao: O servidor recebe a solicita√ß√£o do cliente (SYN), confirma a conex√£o (ACK) e envia uma resposta de confirma√ß√£o ao cliente.
    
      - nome: TCP ACK
        etapa: ü§ù TCP Handshake
        mostrar:
          flexa: [c, s]
        quando:
          continuar: proximo()
        descricao: O cliente recebe a confirma√ß√£o do servidor (ACK) e a conex√£o TCP √© estabelecida.
    
      - nome: Connection established
        etapa: üîè Certificate Check
        mostrar:
          texto: Conex√£o estabelecida
        quando:
          continuar: proximo()
        descricao: A conex√£o TCP foi estabelecida e agora o processo de verifica√ß√£o do certificado come√ßa.
    
      - nome: Client Hello
        etapa: üîè Certificate Check
        mostrar:
          flexa: [c, s]
        quando:
          continuar: proximo()
        descricao: O cliente envia uma mensagem "Client Hello" ao servidor, incluindo informa√ß√µes criptogr√°ficas e prefer√™ncias de criptografia.
    
      - nome: Server Hello
        etapa: üîè Certificate Check
        mostrar:
          flexa: [s, c]
        quando:
          continuar: proximo()
        descricao: O servidor responde com uma mensagem "Server Hello", selecionando uma su√≠te de criptografia apropriada e enviando seu certificado digital.
    
      - nome: Certificate
        etapa: üîè Certificate Check
        mostrar:
          flexa: [s, c]
        quando:
          continuar: proximo()
        descricao: O cliente recebe o certificado do servidor e verifica sua autenticidade e validade.
    
      - nome: Server Hello Done
        etapa: üîè Certificate Check
        mostrar:
          flexa: [s, c]
        quando:
          continuar: proximo()
        descricao: O servidor indica que concluiu as negocia√ß√µes e est√° pronto para receber a chave de criptografia.
    
      - nome: Client Key Exchange
        etapa: üîê Key Exchange
        mostrar:
          flexa: [c, s]
        quando:
          continuar: proximo()
        descricao: O cliente gera uma chave de sess√£o e a criptografa usando a chave p√∫blica do servidor, enviando-a de volta ao servidor.
    
      - nome: Change Cipher Spec
        etapa: üîê Key Exchange
        mostrar:
          flexa: [c, s]
        quando:
          continuar: proximo()
        descricao: O cliente notifica ao servidor que futuras mensagens ser√£o criptografadas com a nova chave.
    
      - nome: Finished
        etapa: üîê Key Exchange
        mostrar:
          flexa: [c, s]
        quando:
          finalizar: fim()
        descricao: O servidor envia uma mensagem "Finished" criptografada, confirmando que a troca de chaves e a negocia√ß√£o foram conclu√≠das com sucesso. A conex√£o est√° pronta para ser usada de forma segura.

  `,
};

const TLS_1_3_CONN = {
  id: "2",
  title: "Fluxo de conex√£o TLS 1.3",
  description:
    "Transport Layer Security (TLS) 1.3 √© a vers√£o mais recente do protocolo criptogr√°fico TLS, projetado para fornecer uma comunica√ß√£o segura e eficiente na Internet.",
  src: `
    hospedeiros:
      c: cliente
      s: servidor
    
    primeiroPasso: 1
    
    passos:
      - nome: Client Hello + Supported Cipher Suites + Guesses Key Agreement Protocol + Key Share
        mostrar:
          flexa: [c, s]
        quando:
          continuar: proximo()
        descricao: O cliente inicia a comunica√ß√£o enviando uma mensagem "Client Hello" ao servidor. Essa mensagem cont√©m as su√≠tes de criptografia suportadas, poss√≠veis protocolos de acordo de chave e uma chave compartilhada para adivinhar o acordo de chave.

    
      - nome: Server Hello + Key Agreement Protocol + Key Share + Server finished
        mostrar:
          flexa: [s, c]
        quando:
          continuar: proximo()
        descricao: O servidor responde ao cliente com uma mensagem "Server Hello", selecionando uma su√≠te de criptografia, um protocolo de acordo de chave e compartilhando uma chave. O servidor tamb√©m envia uma mensagem "Server finished" indicando que a negocia√ß√£o est√° conclu√≠da no lado do servidor.

      - nome: Checks Certificate + Generates Keys + Client finished
        mostrar:
          flexa: [c, s]
        quando:
          finalizar: fim()
        descricao: O cliente verifica o certificado recebido do servidor, verifica sua autenticidade e gera chaves de criptografia. Em seguida, o cliente envia uma mensagem "Client finished" indicando que a negocia√ß√£o est√° conclu√≠da no lado do cliente.
  `,
};

export const DEFAULT_VISUALIZATIONS: V[] = [
  { ...TLS_1_2_CONN, parsed: parserV(TLS_1_2_CONN.src) },
  { ...TLS_1_3_CONN, parsed: parserV(TLS_1_3_CONN.src) },
];
